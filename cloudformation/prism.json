AWSTemplateFormatVersion: '2010-09-09'
Description: 'PRISM POC - Serverless News Processing Platform'

Parameters:
  NewsAPIKey:
    Type: String
    Description: API Key for NewsAPI
    NoEcho: true
  CodeBucket:
    Type: String
    Description: S3 bucket containing Lambda code
  CodeVersion:
    Type: String
    Description: Version/commit hash of the code
    Default: latest

Resources:
  # DynamoDB Table for storing news items
  NewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: prism-news
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 Bucket for web hosting with private access and CORS
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub prism-web-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - ETag
            MaxAge: 3000

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: WebsiteBucket
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowAccountAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:ListBucket'
              - 's3:DeleteObject'
            Resource:
              - !Sub '${WebsiteBucket.Arn}'
              - !Sub '${WebsiteBucket.Arn}/*'
          - Sid: Statement1
            Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !Sub '${WebsiteBucket.Arn}'
              - !Sub '${WebsiteBucket.Arn}/*'

  # Lambda Functions
  NewsIngestionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub ${CodeVersion}/news-ingestion.zip
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          NEWS_API_KEY: !Ref NewsAPIKey

  NewsProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub ${CodeVersion}/news-processing.zip
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 30

  NewsQueryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Sub ${CodeVersion}/news-query.zip
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 30

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: prism-api

  NewsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: news

  # OPTIONS method for CORS
  NewsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref NewsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  NewsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref NewsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NewsQueryFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - NewsMethod
      - NewsOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ApiGateway
      StageName: prod

  # Lambda Permission for API Gateway
  NewsQueryFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NewsQueryFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/news

  # EventBridge Rule
  NewsProcessingRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to trigger news processing"
      EventPattern:
        source:
          - "prism.news"
        detail-type:
          - "news.ingested"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NewsProcessingFunction.Arn
          Id: ProcessNews

  # Lambda Permission for EventBridge
  NewsProcessingFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NewsProcessingFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NewsProcessingRule.Arn

  # IAM Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PrismLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                Resource: !GetAtt NewsTable.Arn
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: '*'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/news
  WebsiteBucketName:
    Description: Name of website bucket
    Value: !Ref WebsiteBucket
  NewsTableName:
    Description: Name of DynamoDB table
    Value: !Ref NewsTable
